; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?gAntiOptimizationMask@@3HA			; gAntiOptimizationMask
PUBLIC	??_C@_03GCDGINBO@ref@				; `string'
PUBLIC	??_C@_03OEPHKLAG@SSE@				; `string'
_BSS	SEGMENT
?gAntiOptimizationMask@@3HA DD 01H DUP (?)		; gAntiOptimizationMask
_BSS	ENDS
msvcjmc	SEGMENT
__B0C4CEA9_malloc@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__24E9E95F_stdlib@h DB 01H
__FE541EC8_InstructionSetLevel@h DB 01H
__8F6F464D_Main@cpp DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_03OEPHKLAG@SSE@
CONST	SEGMENT
??_C@_03OEPHKLAG@SSE@ DB 'SSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDGINBO@ref@
CONST	SEGMENT
??_C@_03GCDGINBO@ref@ DB 'ref', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B DQ FLAT:??_C@_03GCDGINBO@ref@ ; `RunPerformanceTest'::`2'::perfVariants
	DQ	FLAT:?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
	DQ	FLAT:??_C@_03OEPHKLAG@SSE@
	DQ	FLAT:?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z		; VecAddRef
PUBLIC	?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z		; VecAddSSE
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@ ; `string'
PUBLIC	__real@40b0000000000000
PUBLIC	__real@4170000000000000
PUBLIC	__real@44800000
PUBLIC	__real@46800000
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_rand:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z DD imagerel $LN6
	DD	imagerel $LN6+148
	DD	imagerel $unwind$?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Randf@@YAMXZ DD imagerel ?Randf@@YAMXZ
	DD	imagerel ?Randf@@YAMXZ+78
	DD	imagerel $unwind$?Randf@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RandVec@@YAXAEATVec4f@@@Z DD imagerel ?RandVec@@YAXAEATVec4f@@@Z
	DD	imagerel ?RandVec@@YAXAEATVec4f@@@Z+110
	DD	imagerel $unwind$?RandVec@@YAXAEATVec4f@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z DD imagerel ?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
	DD	imagerel ?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z+216
	DD	imagerel $unwind$?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z DD imagerel ?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
	DD	imagerel ?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z+216
	DD	imagerel $unwind$?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunPerformanceTest@@YAXXZ DD imagerel ?RunPerformanceTest@@YAXXZ
	DD	imagerel ?RunPerformanceTest@@YAXXZ+562
	DD	imagerel $unwind$?RunPerformanceTest@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunTests@@YAHXZ DD imagerel ?RunTests@@YAHXZ
	DD	imagerel ?RunTests@@YAHXZ+59
	DD	imagerel $unwind$?RunTests@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@4170000000000000
CONST	SEGMENT
__real@4170000000000000 DQ 04170000000000000r	; 1.67772e+07
CONST	ENDS
;	COMDAT __real@40b0000000000000
CONST	SEGMENT
__real@40b0000000000000 DQ 040b0000000000000r	; 4096
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
CONST	SEGMENT
??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@ DB '%'
	DB	'12s: %.2f average cycles | %.2f lowest cycles', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025052d01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunTests@@YAHXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunPerformanceTest@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	07003004dH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0250H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RunPerformanceTest@@YAXXZ$rtcName$0 DB 041H		; RunPerformanceTest
	DB	070H
	DB	065H
	DB	072H
	DB	066H
	DB	00H
	ORG $+2
?RunPerformanceTest@@YAXXZ$rtcName$1 DB 042H		; RunPerformanceTest
	DB	070H
	DB	065H
	DB	072H
	DB	066H
	DB	00H
	ORG $+2
?RunPerformanceTest@@YAXXZ$rtcName$2 DB 06fH		; RunPerformanceTest
	DB	075H
	DB	074H
	DB	00H
	ORG $+12
?RunPerformanceTest@@YAXXZ$rtcVarDesc DD 090H		; RunPerformanceTest
	DD	010H
	DQ	FLAT:?RunPerformanceTest@@YAXXZ$rtcName$2
	DD	060H
	DD	010H
	DQ	FLAT:?RunPerformanceTest@@YAXXZ$rtcName$1
	DD	030H
	DD	010H
	DQ	FLAT:?RunPerformanceTest@@YAXXZ$rtcName$0
	ORG $+144
?RunPerformanceTest@@YAXXZ$rtcFrameData DD 03H		; RunPerformanceTest
	DD	00H
	DQ	FLAT:?RunPerformanceTest@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RandVec@@YAXAEATVec4f@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Randf@@YAMXZ DD 035051e01H
	DD	010a330fH
	DD	07003001fH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z DD 025053401H
	DD	0118231dH
	DD	070110023H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\Main.cpp
;	COMDAT main
_TEXT	SEGMENT
argc$ = 224
argv$ = 232
main	PROC						; COMDAT

; 10   : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8F6F464D_Main@cpp
	call	__CheckForDebuggerJustMyCode

; 11   : 	return RunTests();

	call	?RunTests@@YAHXZ			; RunTests

; 12   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunTests@@YAHXZ
_TEXT	SEGMENT
?RunTests@@YAHXZ PROC					; RunTests, COMDAT

; 131  : {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 132  : 	//if (RunCorrectnessTest())
; 133  : 	//	return EXIT_FAILURE;
; 134  : 	//
; 135  : 	//printf("All tests correct.\n");
; 136  : 
; 137  : 	RunPerformanceTest();

	call	?RunPerformanceTest@@YAXXZ		; RunPerformanceTest

; 138  : 
; 139  : 	return EXIT_SUCCESS;

	xor	eax, eax

; 140  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?RunTests@@YAHXZ ENDP					; RunTests
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunPerformanceTest@@YAXXZ
_TEXT	SEGMENT
Aperf$ = 16
Bperf$ = 64
out$ = 112
i$6 = 148
bestTime$7 = 184
sumTime$8 = 216
run$9 = 244
time$10 = 280
avgTime$11 = 312
cyclesPerRun$12 = 344
tv128 = 552
__$ArrayPad$ = 560
?RunPerformanceTest@@YAXXZ PROC				; RunPerformanceTest, COMDAT

; 90   : {

	push	rbp
	push	rdi
	sub	rsp, 616				; 00000268H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 91   : 	static constexpr struct {
; 92   : 		const char* name;
; 93   : 		void (*Run)(Vec4f* out, const Vec4f* A, const Vec4f* B, int count);
; 94   : 	} perfVariants[] = {
; 95   : 		{ "ref",  RunRef },
; 96   : 		{ "SSE",  RunSSE },
; 97   : 	};
; 98   : 	static constexpr int nPerfVars = (int)(sizeof(perfVariants) / sizeof(*perfVariants));
; 99   : 
; 100  : 	Vec4f Aperf, Bperf, out;
; 101  : 	RandVec(Aperf);

	lea	rcx, QWORD PTR Aperf$[rbp]
	call	?RandVec@@YAXAEATVec4f@@@Z		; RandVec

; 102  : 	RandVec(Bperf);

	lea	rcx, QWORD PTR Bperf$[rbp]
	call	?RandVec@@YAXAEATVec4f@@@Z		; RandVec

; 103  : 
; 104  : 	for (int i = 0; i < nPerfVars; i++)

	mov	DWORD PTR i$6[rbp], 0
	jmp	SHORT $LN4@RunPerform
$LN2@RunPerform:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN4@RunPerform:
	cmp	DWORD PTR i$6[rbp], 2
	jge	$LN3@RunPerform

; 105  : 	{
; 106  : 		static constexpr int nRuns = 4096;
; 107  : 		static constexpr int addsPerRun = 4096;
; 108  : 
; 109  : 		unsigned long long bestTime = ~0ull;

	mov	QWORD PTR bestTime$7[rbp], -1

; 110  : 		unsigned long long sumTime = 0ull;

	mov	QWORD PTR sumTime$8[rbp], 0

; 111  : 
; 112  : 		for (int run = 0; run < nRuns; run++)

	mov	DWORD PTR run$9[rbp], 0
	jmp	SHORT $LN7@RunPerform
$LN5@RunPerform:
	mov	eax, DWORD PTR run$9[rbp]
	inc	eax
	mov	DWORD PTR run$9[rbp], eax
$LN7@RunPerform:
	cmp	DWORD PTR run$9[rbp], 4096		; 00001000H
	jge	$LN6@RunPerform

; 113  : 		{
; 114  : 			unsigned long long time = __rdtsc(); // The processor time stamp records the number of clock cycles since the last reset

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	mov	QWORD PTR time$10[rbp], rax

; 115  : 			perfVariants[i].Run(&out, &Aperf, &Bperf, addsPerRun);

	movsxd	rax, DWORD PTR i$6[rbp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
	mov	QWORD PTR tv128[rbp], rcx
	mov	r9d, 4096				; 00001000H
	lea	r8, QWORD PTR Bperf$[rbp]
	lea	rdx, QWORD PTR Aperf$[rbp]
	lea	rcx, QWORD PTR out$[rbp]
	mov	r10, QWORD PTR tv128[rbp]
	call	QWORD PTR [r10+rax+8]

; 116  : 			time = __rdtsc() - time;

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	sub	rax, QWORD PTR time$10[rbp]
	mov	QWORD PTR time$10[rbp], rax

; 117  : 
; 118  : 			sumTime += time;

	mov	rax, QWORD PTR time$10[rbp]
	mov	rcx, QWORD PTR sumTime$8[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR sumTime$8[rbp], rax

; 119  : 
; 120  : 			if (time < bestTime)

	mov	rax, QWORD PTR bestTime$7[rbp]
	cmp	QWORD PTR time$10[rbp], rax
	jae	SHORT $LN8@RunPerform

; 121  : 				bestTime = time;

	mov	rax, QWORD PTR time$10[rbp]
	mov	QWORD PTR bestTime$7[rbp], rax
$LN8@RunPerform:

; 122  : 		}

	jmp	$LN5@RunPerform
$LN6@RunPerform:

; 123  : 
; 124  : 		double avgTime = (double)sumTime / (double)(addsPerRun * nRuns);

	mov	rax, QWORD PTR sumTime$8[rbp]
	test	rax, rax
	jl	SHORT $LN12@RunPerform
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN13@RunPerform
$LN12@RunPerform:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@RunPerform:
	divsd	xmm0, QWORD PTR __real@4170000000000000
	movsd	QWORD PTR avgTime$11[rbp], xmm0

; 125  : 		double cyclesPerRun = (double)bestTime / (double)addsPerRun;

	mov	rax, QWORD PTR bestTime$7[rbp]
	test	rax, rax
	jl	SHORT $LN10@RunPerform
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN11@RunPerform
$LN10@RunPerform:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN11@RunPerform:
	divsd	xmm0, QWORD PTR __real@40b0000000000000
	movsd	QWORD PTR cyclesPerRun$12[rbp], xmm0

; 126  : 		printf("%12s: %.2f average cycles | %.2f lowest cycles\n", perfVariants[i].name, avgTime, cyclesPerRun);

	movsxd	rax, DWORD PTR i$6[rbp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
	movsd	xmm3, QWORD PTR cyclesPerRun$12[rbp]
	movq	r9, xmm3
	movsd	xmm2, QWORD PTR avgTime$11[rbp]
	movq	r8, xmm2
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
	call	printf

; 127  : 	}

	jmp	$LN2@RunPerform
$LN3@RunPerform:

; 128  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?RunPerformanceTest@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+584]
	pop	rdi
	pop	rbp
	ret	0
?RunPerformanceTest@@YAXXZ ENDP				; RunPerformanceTest
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
_TEXT	SEGMENT
i$1 = 4
j$2 = 36
tv77 = 248
out$ = 288
A$ = 296
B$ = 304
count$ = 312
?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z PROC			; RunSSE, COMDAT

; 56   : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 57   : 	for (int i = 0; i < count; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@RunSSE
$LN2@RunSSE:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@RunSSE:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	SHORT $LN3@RunSSE

; 58   : 	{
; 59   : 		int j = i & gAntiOptimizationMask; // Only take first element

	mov	eax, DWORD PTR ?gAntiOptimizationMask@@3HA ; gAntiOptimizationMask
	mov	ecx, DWORD PTR i$1[rbp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rbp], eax

; 60   : 		VecAddSSE(out[j], A[j], B[j]);

	movsxd	rax, DWORD PTR j$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR B$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR j$2[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR A$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$2[rbp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR out$[rbp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv77[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv77[rbp]
	mov	rcx, rax
	call	?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z	; VecAddSSE

; 61   : 	}

	jmp	SHORT $LN2@RunSSE
$LN3@RunSSE:

; 62   : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z ENDP			; RunSSE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
_TEXT	SEGMENT
i$1 = 4
j$2 = 36
tv77 = 248
out$ = 288
A$ = 296
B$ = 304
count$ = 312
?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z PROC			; RunRef, COMDAT

; 47   : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 48   : 	for (int i = 0; i < count; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@RunRef
$LN2@RunRef:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@RunRef:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	SHORT $LN3@RunRef

; 49   : 	{
; 50   : 		int j = i & gAntiOptimizationMask; // Only take first element

	mov	eax, DWORD PTR ?gAntiOptimizationMask@@3HA ; gAntiOptimizationMask
	mov	ecx, DWORD PTR i$1[rbp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rbp], eax

; 51   : 		VecAddRef(out[j], A[j], B[j]);

	movsxd	rax, DWORD PTR j$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR B$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR j$2[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR A$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$2[rbp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR out$[rbp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv77[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv77[rbp]
	mov	rcx, rax
	call	?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z	; VecAddRef

; 52   : 	}

	jmp	SHORT $LN2@RunRef
$LN3@RunRef:

; 53   : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z ENDP			; RunRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RandVec@@YAXAEATVec4f@@@Z
_TEXT	SEGMENT
i$1 = 4
M$ = 256
?RandVec@@YAXAEATVec4f@@@Z PROC				; RandVec, COMDAT

; 35   : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 36   : 	for (int i = 0; i < 4; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@RandVec
$LN2@RandVec:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@RandVec:
	cmp	DWORD PTR i$1[rbp], 4
	jge	SHORT $LN3@RandVec

; 37   : 		M.m[i] = Randf();

	call	?Randf@@YAMXZ				; Randf
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR M$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN2@RandVec
$LN3@RandVec:

; 38   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?RandVec@@YAXAEATVec4f@@@Z ENDP				; RandVec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?Randf@@YAMXZ
_TEXT	SEGMENT
?Randf@@YAMXZ PROC					; Randf, COMDAT

; 30   : {

	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	QWORD PTR __imp_rand
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR __real@46800000
	divss	xmm0, DWORD PTR __real@44800000

; 32   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Randf@@YAMXZ ENDP					; Randf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z
_TEXT	SEGMENT
$T1 = 208
out$ = 272
A$ = 280
B$ = 288
?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z PROC		; VecAddSSE, COMDAT

; 20   : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 21   : 	out.row = _mm_add_ps(A.row, B.row);

	mov	rax, QWORD PTR A$[rbp]
	mov	rcx, QWORD PTR B$[rbp]
	movups	xmm0, XMMWORD PTR [rax]
	addps	xmm0, XMMWORD PTR [rcx]
	movaps	XMMWORD PTR $T1[rbp], xmm0
	mov	rax, QWORD PTR out$[rbp]
	movaps	xmm0, XMMWORD PTR $T1[rbp]
	movups	XMMWORD PTR [rax], xmm0

; 22   : }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z ENDP		; VecAddSSE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z
_TEXT	SEGMENT
i$1 = 4
out$ = 256
A$ = 264
B$ = 272
?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z PROC		; VecAddRef, COMDAT

; 14   : {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__FE541EC8_InstructionSetLevel@h
	call	__CheckForDebuggerJustMyCode

; 15   : 	for (int i = 0; i < 4; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@VecAddRef
$LN2@VecAddRef:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@VecAddRef:
	cmp	DWORD PTR i$1[rbp], 4
	jge	SHORT $LN3@VecAddRef

; 16   : 		out.m[i] = A.m[i] + B.m[i];

	movsxd	rax, DWORD PTR i$1[rbp]
	movsxd	rcx, DWORD PTR i$1[rbp]
	mov	rdx, QWORD PTR A$[rbp]
	mov	r8, QWORD PTR B$[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	addss	xmm0, DWORD PTR [r8+rcx*4]
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR out$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN2@VecAddRef
$LN3@VecAddRef:

; 17   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z ENDP		; VecAddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Format$ = 320
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 961  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
