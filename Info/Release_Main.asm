; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_03GCDGINBO@ref@				; `string'
PUBLIC	??_C@_03OEPHKLAG@SSE@				; `string'
PUBLIC	??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@ ; `string'
PUBLIC	?gAntiOptimizationMask@@3HA			; gAntiOptimizationMask
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	rand:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__security_check_cookie:PROC
?gAntiOptimizationMask@@3HA DD 01H DUP (?)		; gAntiOptimizationMask
_BSS	ENDS
;	COMDAT ?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
CONST	SEGMENT
?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B DQ FLAT:??_C@_03GCDGINBO@ref@ ; `RunPerformanceTest'::`2'::perfVariants
	DQ	FLAT:?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
	DQ	FLAT:??_C@_03OEPHKLAG@SSE@
	DQ	FLAT:?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
CONST	ENDS
;	COMDAT ??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
CONST	SEGMENT
??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@ DB '%'
	DB	'12s: %.2f average cycles | %.2f lowest cycles', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OEPHKLAG@SSE@
CONST	SEGMENT
??_C@_03OEPHKLAG@SSE@ DB 'SSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDGINBO@ref@
CONST	SEGMENT
??_C@_03GCDGINBO@ref@ DB 'ref', 00H			; `string'
CONST	ENDS
PUBLIC	main
PUBLIC	?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z		; VecAddSSE
PUBLIC	?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z		; VecAddRef
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@3a800000
PUBLIC	__real@3e70000000000000
PUBLIC	__real@3f30000000000000
PUBLIC	__real@46800000
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN49
	DD	imagerel $LN49+445
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunTests@@YAHXZ DD imagerel ?RunTests@@YAHXZ
	DD	imagerel ?RunTests@@YAHXZ+445
	DD	imagerel $unwind$?RunTests@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RunPerformanceTest@@YAXXZ DD imagerel ?RunPerformanceTest@@YAXXZ
	DD	imagerel ?RunPerformanceTest@@YAXXZ+443
	DD	imagerel $unwind$?RunPerformanceTest@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RandVec@@YAXAEATVec4f@@@Z DD imagerel ?RandVec@@YAXAEATVec4f@@@Z
	DD	imagerel ?RandVec@@YAXAEATVec4f@@@Z+103
	DD	imagerel $unwind$?RandVec@@YAXAEATVec4f@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Randf@@YAMXZ DD imagerel ?Randf@@YAMXZ
	DD	imagerel ?Randf@@YAMXZ+37
	DD	imagerel $unwind$?Randf@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@3f30000000000000
CONST	SEGMENT
__real@3f30000000000000 DQ 03f30000000000000r	; 0.000244141
CONST	ENDS
;	COMDAT __real@3e70000000000000
CONST	SEGMENT
__real@3e70000000000000 DQ 03e70000000000000r	; 5.96046e-08
CONST	ENDS
;	COMDAT __real@3a800000
CONST	SEGMENT
__real@3a800000 DD 03a800000r			; 0.000976563
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Randf@@YAMXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RandVec@@YAXAEATVec4f@@@Z DD 082101H
	DD	027821H
	DD	03680fH
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunPerformanceTest@@YAXXZ DD 0e3419H
	DD	067825H
	DD	076820H
	DD	016641bH
	DD	015541bH
	DD	014341bH
	DD	0f014f21bH
	DD	07010e012H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RunTests@@YAHXZ DD 0e3419H
	DD	067825H
	DD	076820H
	DD	016641bH
	DD	015541bH
	DD	014341bH
	DD	0f014f21bH
	DD	07010e012H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0e3419H
	DD	067825H
	DD	076820H
	DD	016641bH
	DD	015541bH
	DD	014341bH
	DD	0f014f21bH
	DD	07010e012H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf

; 644  :     }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT

; 954  :     {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf

; 959  :         __crt_va_end(_ArgList);
; 960  :         return _Result;
; 961  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z
_TEXT	SEGMENT
out$ = 8
A$ = 16
B$ = 24
?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z PROC		; VecAddRef, COMDAT

; 15   : 	for (int i = 0; i < 4; i++)
; 16   : 		out.m[i] = A.m[i] + B.m[i];

	movss	xmm0, DWORD PTR [rdx]
	addss	xmm0, DWORD PTR [r8]
	movss	DWORD PTR [rcx], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	addss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx+4], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	addss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+8], xmm0
	movss	xmm1, DWORD PTR [rdx+12]
	addss	xmm1, DWORD PTR [r8+12]
	movss	DWORD PTR [rcx+12], xmm1

; 17   : }

	ret	0
?VecAddRef@@YAXAEATVec4f@@AEBT1@1@Z ENDP		; VecAddRef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z
_TEXT	SEGMENT
out$ = 8
A$ = 16
B$ = 24
?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z PROC		; VecAddSSE, COMDAT

; 21   : 	out.row = _mm_add_ps(A.row, B.row);

	movups	xmm0, XMMWORD PTR [rdx]
	addps	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rcx], xmm0

; 22   : }

	ret	0
?VecAddSSE@@YAXAEATVec4f@@AEBT1@1@Z ENDP		; VecAddSSE
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?Randf@@YAMXZ
_TEXT	SEGMENT
?Randf@@YAMXZ PROC					; Randf, COMDAT

; 30   : {

	sub	rsp, 40					; 00000028H

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, DWORD PTR __real@46800000
	mulss	xmm0, DWORD PTR __real@3a800000

; 32   : }

	add	rsp, 40					; 00000028H
	ret	0
?Randf@@YAMXZ ENDP					; Randf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RandVec@@YAXAEATVec4f@@@Z
_TEXT	SEGMENT
M$ = 80
?RandVec@@YAXAEATVec4f@@@Z PROC				; RandVec, COMDAT

; 35   : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	rdi, rcx
	movss	xmm6, DWORD PTR __real@46800000
	xor	ebx, ebx
	movaps	XMMWORD PTR [rsp+32], xmm7
	movss	xmm7, DWORD PTR __real@3a800000
	npad	7
$LL4@RandVec:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 36   : 	for (int i = 0; i < 4; i++)
; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR [rdi+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL4@RandVec

; 38   : }

	mov	rbx, QWORD PTR [rsp+80]
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?RandVec@@YAXAEATVec4f@@@Z ENDP				; RandVec
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z
_TEXT	SEGMENT
out$ = 8
A$ = 16
B$ = 24
count$ = 32
?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z PROC			; RunRef, COMDAT

; 48   : 	for (int i = 0; i < count; i++)

	test	r9d, r9d
	jle	SHORT $LN3@RunRef
	movsxd	r11, DWORD PTR ?gAntiOptimizationMask@@3HA ; gAntiOptimizationMask
	xor	r10d, r10d
	mov	r9d, r9d
$LL4@RunRef:

; 49   : 	{
; 50   : 		int j = i & gAntiOptimizationMask; // Only take first element

	mov	rax, r10
	inc	r10
	and	rax, r11
	lea	rax, QWORD PTR [rax*4]

; 16   : 		out.m[i] = A.m[i] + B.m[i];

	movss	xmm0, DWORD PTR [r8+rax*4]
	addss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR [rcx+rax*4], xmm0
	movss	xmm1, DWORD PTR [r8+rax*4+4]
	addss	xmm1, DWORD PTR [rdx+rax*4+4]
	movss	DWORD PTR [rcx+rax*4+4], xmm1
	movss	xmm0, DWORD PTR [rdx+rax*4+8]
	addss	xmm0, DWORD PTR [r8+rax*4+8]
	movss	DWORD PTR [rcx+rax*4+8], xmm0
	movss	xmm1, DWORD PTR [rdx+rax*4+12]
	addss	xmm1, DWORD PTR [r8+rax*4+12]
	movss	DWORD PTR [rcx+rax*4+12], xmm1

; 48   : 	for (int i = 0; i < count; i++)

	sub	r9, 1
	jne	SHORT $LL4@RunRef
$LN3@RunRef:

; 51   : 		VecAddRef(out[j], A[j], B[j]);
; 52   : 	}
; 53   : }

	ret	0
?RunRef@@YAXPEATVec4f@@PEBT1@1H@Z ENDP			; RunRef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z
_TEXT	SEGMENT
out$ = 8
A$ = 16
B$ = 24
count$ = 32
?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z PROC			; RunSSE, COMDAT

; 57   : 	for (int i = 0; i < count; i++)

	test	r9d, r9d
	jle	SHORT $LN3@RunSSE
	movsxd	r11, DWORD PTR ?gAntiOptimizationMask@@3HA ; gAntiOptimizationMask
	xor	r10d, r10d
	mov	r9d, r9d
	npad	14
$LL4@RunSSE:

; 58   : 	{
; 59   : 		int j = i & gAntiOptimizationMask; // Only take first element

	mov	rax, r10
	inc	r10
	and	rax, r11

; 60   : 		VecAddSSE(out[j], A[j], B[j]);

	add	rax, rax

; 21   : 	out.row = _mm_add_ps(A.row, B.row);

	movups	xmm0, XMMWORD PTR [rdx+rax*8]
	addps	xmm0, XMMWORD PTR [r8+rax*8]
	movups	XMMWORD PTR [rcx+rax*8], xmm0

; 57   : 	for (int i = 0; i < count; i++)

	sub	r9, 1
	jne	SHORT $LL4@RunSSE
$LN3@RunSSE:

; 61   : 	}
; 62   : }

	ret	0
?RunSSE@@YAXPEATVec4f@@PEBT1@1H@Z ENDP			; RunSSE
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunPerformanceTest@@YAXXZ
_TEXT	SEGMENT
Bperf$ = 32
Aperf$ = 48
out$ = 64
__$ArrayPad$ = 80
?RunPerformanceTest@@YAXXZ PROC				; RunPerformanceTest, COMDAT

; 90   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rsp+112], xmm6
	movaps	XMMWORD PTR [rsp+96], xmm7
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movss	xmm6, DWORD PTR __real@46800000
	xor	ebx, ebx
	movss	xmm7, DWORD PTR __real@3a800000
$LL13@RunPerform:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Aperf$[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL13@RunPerform
	xor	ebx, ebx
	npad	5
$LL20@RunPerform:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Bperf$[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL20@RunPerform
	movsd	xmm6, QWORD PTR __real@3f30000000000000
	lea	r14, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
	movsd	xmm7, QWORD PTR __real@3e70000000000000
	lea	r15, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B+32
	npad	15
$LL4@RunPerform:

; 91   : 	static constexpr struct {
; 92   : 		const char* name;
; 93   : 		void (*Run)(Vec4f* out, const Vec4f* A, const Vec4f* B, int count);
; 94   : 	} perfVariants[] = {
; 95   : 		{ "ref",  RunRef },
; 96   : 		{ "SSE",  RunSSE },
; 97   : 	};
; 98   : 	static constexpr int nPerfVars = (int)(sizeof(perfVariants) / sizeof(*perfVariants));
; 99   : 
; 100  : 	Vec4f Aperf, Bperf, out;
; 101  : 	RandVec(Aperf);
; 102  : 	RandVec(Bperf);
; 103  : 
; 104  : 	for (int i = 0; i < nPerfVars; i++)
; 105  : 	{
; 106  : 		static constexpr int nRuns = 4096;
; 107  : 		static constexpr int addsPerRun = 4096;
; 108  : 
; 109  : 		unsigned long long bestTime = ~0ull;

	mov	rdi, -1

; 110  : 		unsigned long long sumTime = 0ull;

	xor	esi, esi
	mov	ebp, 4096				; 00001000H
	npad	2
$LL7@RunPerform:

; 111  : 
; 112  : 		for (int run = 0; run < nRuns; run++)
; 113  : 		{
; 114  : 			unsigned long long time = __rdtsc(); // The processor time stamp records the number of clock cycles since the last reset

	rdtsc
	shl	rdx, 32					; 00000020H

; 115  : 			perfVariants[i].Run(&out, &Aperf, &Bperf, addsPerRun);

	lea	r8, QWORD PTR Bperf$[rsp]
	or	rax, rdx
	lea	rcx, QWORD PTR out$[rsp]
	lea	rdx, QWORD PTR Aperf$[rsp]
	mov	r9d, 4096				; 00001000H
	mov	rbx, rax
	call	QWORD PTR [r14+8]

; 116  : 			time = __rdtsc() - time;

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	sub	rax, rbx

; 117  : 
; 118  : 			sumTime += time;

	add	rsi, rax
	cmp	rax, rdi
	cmovae	rax, rdi
	mov	rdi, rax
	sub	rbp, 1
	jne	SHORT $LL7@RunPerform

; 125  : 		double cyclesPerRun = (double)bestTime / (double)addsPerRun;

	xorps	xmm3, xmm3
	test	rax, rax
	js	SHORT $LN42@RunPerform
	cvtsi2sd xmm3, rax
	jmp	SHORT $LN43@RunPerform
$LN42@RunPerform:
	shr	rax, 1
	and	edi, 1
	or	rax, rdi
	cvtsi2sd xmm3, rax
	addsd	xmm3, xmm3
$LN43@RunPerform:
	mulsd	xmm3, xmm6
	xorps	xmm2, xmm2
	test	rsi, rsi
	js	SHORT $LN40@RunPerform

; 119  : 
; 120  : 			if (time < bestTime)
; 121  : 				bestTime = time;
; 122  : 		}
; 123  : 
; 124  : 		double avgTime = (double)sumTime / (double)(addsPerRun * nRuns);

	cvtsi2sd xmm2, rsi
	jmp	SHORT $LN41@RunPerform
$LN40@RunPerform:
	mov	rax, rsi
	and	esi, 1
	shr	rax, 1
	or	rax, rsi
	cvtsi2sd xmm2, rax
	addsd	xmm2, xmm2
$LN41@RunPerform:

; 126  : 		printf("%12s: %.2f average cycles | %.2f lowest cycles\n", perfVariants[i].name, avgTime, cyclesPerRun);

	mov	rdx, QWORD PTR [r14]
	lea	rcx, OFFSET FLAT:??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
	mulsd	xmm2, xmm7
	movq	r9, xmm3
	movq	r8, xmm2
	call	printf
	add	r14, 16
	cmp	r14, r15
	jl	$LL4@RunPerform

; 127  : 	}
; 128  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?RunPerformanceTest@@YAXXZ ENDP				; RunPerformanceTest
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\InstructionSetLevel.h
;	COMDAT ?RunTests@@YAHXZ
_TEXT	SEGMENT
Bperf$1 = 32
Aperf$2 = 48
out$3 = 64
__$ArrayPad$ = 80
?RunTests@@YAHXZ PROC					; RunTests, COMDAT

; 131  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rsp+112], xmm6
	movaps	XMMWORD PTR [rsp+96], xmm7
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movss	xmm6, DWORD PTR __real@46800000
	xor	ebx, ebx
	movss	xmm7, DWORD PTR __real@3a800000
$LL15@RunTests:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Aperf$2[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL15@RunTests
	xor	ebx, ebx
	npad	5
$LL22@RunTests:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Bperf$1[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL22@RunTests
	movsd	xmm6, QWORD PTR __real@3f30000000000000
	lea	r14, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
	movsd	xmm7, QWORD PTR __real@3e70000000000000
	lea	r15, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B+32
	npad	15
$LL6@RunTests:

; 109  : 		unsigned long long bestTime = ~0ull;

	mov	rdi, -1

; 110  : 		unsigned long long sumTime = 0ull;

	xor	esi, esi
	mov	ebp, 4096				; 00001000H
	npad	2
$LL9@RunTests:

; 111  : 
; 112  : 		for (int run = 0; run < nRuns; run++)
; 113  : 		{
; 114  : 			unsigned long long time = __rdtsc(); // The processor time stamp records the number of clock cycles since the last reset

	rdtsc
	shl	rdx, 32					; 00000020H

; 115  : 			perfVariants[i].Run(&out, &Aperf, &Bperf, addsPerRun);

	lea	r8, QWORD PTR Bperf$1[rsp]
	or	rax, rdx
	lea	rcx, QWORD PTR out$3[rsp]
	lea	rdx, QWORD PTR Aperf$2[rsp]
	mov	r9d, 4096				; 00001000H
	mov	rbx, rax
	call	QWORD PTR [r14+8]

; 116  : 			time = __rdtsc() - time;

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	sub	rax, rbx

; 117  : 
; 118  : 			sumTime += time;

	add	rsi, rax
	cmp	rax, rdi
	cmovae	rax, rdi
	mov	rdi, rax
	sub	rbp, 1
	jne	SHORT $LL9@RunTests

; 125  : 		double cyclesPerRun = (double)bestTime / (double)addsPerRun;

	xorps	xmm3, xmm3
	test	rax, rax
	js	SHORT $LN44@RunTests
	cvtsi2sd xmm3, rax
	jmp	SHORT $LN45@RunTests
$LN44@RunTests:
	shr	rax, 1
	and	edi, 1
	or	rax, rdi
	cvtsi2sd xmm3, rax
	addsd	xmm3, xmm3
$LN45@RunTests:
	mulsd	xmm3, xmm6
	xorps	xmm2, xmm2
	test	rsi, rsi
	js	SHORT $LN42@RunTests

; 119  : 
; 120  : 			if (time < bestTime)
; 121  : 				bestTime = time;
; 122  : 		}
; 123  : 
; 124  : 		double avgTime = (double)sumTime / (double)(addsPerRun * nRuns);

	cvtsi2sd xmm2, rsi
	jmp	SHORT $LN43@RunTests
$LN42@RunTests:
	mov	rax, rsi
	and	esi, 1
	shr	rax, 1
	or	rax, rsi
	cvtsi2sd xmm2, rax
	addsd	xmm2, xmm2
$LN43@RunTests:

; 126  : 		printf("%12s: %.2f average cycles | %.2f lowest cycles\n", perfVariants[i].name, avgTime, cyclesPerRun);

	mov	rdx, QWORD PTR [r14]
	lea	rcx, OFFSET FLAT:??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
	mulsd	xmm2, xmm7
	movq	r9, xmm3
	movq	r8, xmm2
	call	printf
	add	r14, 16
	cmp	r14, r15
	jl	$LL6@RunTests

; 132  : 	//if (RunCorrectnessTest())
; 133  : 	//	return EXIT_FAILURE;
; 134  : 	//
; 135  : 	//printf("All tests correct.\n");
; 136  : 
; 137  : 	RunPerformanceTest();
; 138  : 
; 139  : 	return EXIT_SUCCESS;

	xor	eax, eax

; 140  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?RunTests@@YAHXZ ENDP					; RunTests
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\#Programming\Parallelism\Main.cpp
; File D:\#Programming\Parallelism\InstructionSetLevel.h
; File D:\#Programming\Parallelism\Main.cpp
;	COMDAT main
_TEXT	SEGMENT
Bperf$1 = 32
Aperf$2 = 48
out$3 = 64
__$ArrayPad$ = 80
argc$ = 160
argv$ = 168
main	PROC						; COMDAT

; 10   : {

$LN49:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	movaps	XMMWORD PTR [rsp+112], xmm6
	movaps	XMMWORD PTR [rsp+96], xmm7
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movss	xmm6, DWORD PTR __real@46800000
	xor	ebx, ebx
	movss	xmm7, DWORD PTR __real@3a800000
$LL17@main:
; File D:\#Programming\Parallelism\InstructionSetLevel.h

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Aperf$2[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL17@main
	xor	ebx, ebx
	npad	5
$LL24@main:

; 31   : 	return (rand() - 16384.0f) / 1024.0f;

	call	rand
	movd	xmm0, eax
	cvtdq2ps xmm0, xmm0
	subss	xmm0, xmm6
	mulss	xmm0, xmm7

; 37   : 		M.m[i] = Randf();

	movss	DWORD PTR Bperf$1[rsp+rbx*4], xmm0
	inc	rbx
	cmp	rbx, 4
	jl	SHORT $LL24@main
	movsd	xmm6, QWORD PTR __real@3f30000000000000
	lea	r14, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B
	movsd	xmm7, QWORD PTR __real@3e70000000000000
	lea	r15, OFFSET FLAT:?perfVariants@?1??RunPerformanceTest@@YAXXZ@4QBU<unnamed-type-perfVariants>@?1??1@YAXXZ@B+32
	npad	15
$LL8@main:

; 109  : 		unsigned long long bestTime = ~0ull;

	mov	rdi, -1

; 110  : 		unsigned long long sumTime = 0ull;

	xor	esi, esi
	mov	ebp, 4096				; 00001000H
	npad	2
$LL11@main:

; 111  : 
; 112  : 		for (int run = 0; run < nRuns; run++)
; 113  : 		{
; 114  : 			unsigned long long time = __rdtsc(); // The processor time stamp records the number of clock cycles since the last reset

	rdtsc
	shl	rdx, 32					; 00000020H

; 115  : 			perfVariants[i].Run(&out, &Aperf, &Bperf, addsPerRun);

	lea	r8, QWORD PTR Bperf$1[rsp]
	or	rax, rdx
	lea	rcx, QWORD PTR out$3[rsp]
	lea	rdx, QWORD PTR Aperf$2[rsp]
	mov	r9d, 4096				; 00001000H
	mov	rbx, rax
	call	QWORD PTR [r14+8]

; 116  : 			time = __rdtsc() - time;

	rdtsc
	shl	rdx, 32					; 00000020H
	or	rax, rdx
	sub	rax, rbx

; 117  : 
; 118  : 			sumTime += time;

	add	rsi, rax
	cmp	rax, rdi
	cmovae	rax, rdi
	mov	rdi, rax
	sub	rbp, 1
	jne	SHORT $LL11@main

; 125  : 		double cyclesPerRun = (double)bestTime / (double)addsPerRun;

	xorps	xmm3, xmm3
	test	rax, rax
	js	SHORT $LN46@main
	cvtsi2sd xmm3, rax
	jmp	SHORT $LN47@main
$LN46@main:
	shr	rax, 1
	and	edi, 1
	or	rax, rdi
	cvtsi2sd xmm3, rax
	addsd	xmm3, xmm3
$LN47@main:
	mulsd	xmm3, xmm6
	xorps	xmm2, xmm2
	test	rsi, rsi
	js	SHORT $LN44@main

; 119  : 
; 120  : 			if (time < bestTime)
; 121  : 				bestTime = time;
; 122  : 		}
; 123  : 
; 124  : 		double avgTime = (double)sumTime / (double)(addsPerRun * nRuns);

	cvtsi2sd xmm2, rsi
	jmp	SHORT $LN45@main
$LN44@main:
	mov	rax, rsi
	and	esi, 1
	shr	rax, 1
	or	rax, rsi
	cvtsi2sd xmm2, rax
	addsd	xmm2, xmm2
$LN45@main:

; 126  : 		printf("%12s: %.2f average cycles | %.2f lowest cycles\n", perfVariants[i].name, avgTime, cyclesPerRun);

	mov	rdx, QWORD PTR [r14]
	lea	rcx, OFFSET FLAT:??_C@_0DA@KNEDKHD@?$CF12s?3?5?$CF?42f?5average?5cycles?5?$HM?5?$CF?42@
	mulsd	xmm2, xmm7
	movq	r9, xmm3
	movq	r8, xmm2
	call	printf
	add	r14, 16
	cmp	r14, r15
	jl	$LL8@main
; File D:\#Programming\Parallelism\Main.cpp

; 11   : 	return RunTests();

	xor	eax, eax

; 12   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	movaps	xmm6, XMMWORD PTR [rsp+112]
	movaps	xmm7, XMMWORD PTR [rsp+96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
END
